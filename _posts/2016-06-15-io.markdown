---
layout: post
title:  "從解題到遊戲製作～IO篇～"
date:   2016-06-15 22:40:00 +0900
categories: 
comments: true
---

就我所知，一般學校課程大多還是從C或C++，
從解題教起。儘管只是輕觸，不會深究。
不管是用於自動批改，或是讓初學者能專注在解決問題上，
都是相當合適的方向。

但是和遊戲的基本概念相去甚遠，
且C或C++要製作遊戲的學習門檻相對高。

這邊先談最根本的 IO。

# IO 相去甚遠

IO 即『輸入』與『輸出』，Input 與 Output 的簡稱。

- Input 即任何自外部傳給電腦的訊息，
**就像視聽味嗅觸覺等感官一樣。**
從需要外在主動觸發的鍵盤、滑鼠、搖桿，
到持續接收周圍訊息的麥克風、攝像機等。

- Output 即任何電腦傳達給外部的訊息，
**用來表達和做出回應的方式。**
像是螢幕、喇叭、燈光等等。

IO 是一切的根本，
就如同人類若不透過動作、表情或語言來表達，
我們完全不知道對方的內心在想什麼一樣。
計算得再快再正確，不表達出來的話，完全沒有意義。

不透過輸入，我們想傳達的事物，
完全不被接受、傳達不了的話，
自然也無法做出適當的回應。

理解 IO 就是理解如何與電腦溝通，
如此才能進而理解你的使魔，
在面對需要牠幫忙的人時，如何溝通。

解題方面通常是使用 blocking IO，
走 standard IO 的路線。

# blocking vs non-blocking

**blocking 是阻擋的意思。**

在你請求輸入或輸出時，
它會停下來等待，並阻擋你的程式繼續執行，
直到請求的資料入手，或確定無法入手為止。

blocking IO 通常**用於等不到 IO 結束就無法前進時**，
解題正是如此。

也許你會想說，遊戲不也時常要等玩家按按鍵進下一句對話，
或者從三個選項中選一個回答嗎？
確實有，但只是遊戲進度本身沒有前進。
背景要動、選取框要閃、角色要眨眼…甚至倒數計時等，
同時有許多事要進行，即便遊戲進度沒有前進。
這些全部停下來，容易讓人誤會程式已經當了。

對於大部份重視和使用者互動的程式，特別是有圖形化介面的，
blocking 住多半是危險的。
通常會使用 non-blocking IO 來處理互動，
判斷有或沒有 input 並給予相對的回應。

關於畫面輸出，由於牽涉更多層面的問題，
通常也多半交由專門的 library 處理，就先略過不提。

# standard IO 與遊戲常見 IO 形式

**standard IO 是透過輸入輸出純文字來互動的。**

以類似檔案的處理方式，用文字的串流 (stream) 來達成。
也就是連續而有序的文字們。

但顯然大部份的遊戲，在大部份時候，
都是透過按下或放開按鍵等方式，而不是輸入的文字。
而且很多按鍵並不會輸入文字，像方向鍵，或修飾用的 shift 等。

輸出也多半是以圖像畫面顯示，
就算有文字的部份，也會是以將文字繪製到畫面上，
而不是吐到 standard output 上。

單就按鍵的輸入，也有許多方式，各有優劣，
在此就先略過。

# 總結

考量一般 blocking standard IO 的限制，
在此限制下針對性地設計遊戲，當然也是可行的。
並不會因此便無法利用這些來做遊戲。

只是限制相當地大，在這框框底下不論如何思考，
就算想複製常見的遊戲，都是相當困難甚至不可能的。

如何活用手上擁有的有限資源，
解析既有的系統並仿製，雖然也是有趣的問題。

知道世上存在不同特性的資源，
從關鍵字深入了解，最後將其掌握，
也是相當重要的。

科技變化迅速、豐富多樣。
不管在此花上多少心力、介紹講解多麼詳細，
想必很快便會過時。

人有時只看得到手上有的，看得到自己視野中的狹小世界。
因此，重要的我想並不是我講了多少東西。
這些永遠有更新得更快、介紹更詳盡的文件可以查閱吧。

**重要的是發現外面的世界，然後去探索。**

就算毫無頭緒，不知從何著手，
至少這篇也提供了一些關鍵字。

之前的我，也是在自己已知的小世界，不停打轉。
看著他人的作品，望著手上的積木，
怎麼樣都想不出他人是怎麼組的。

故此有感。
